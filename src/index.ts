import fs from "fs"
import path from "path"
import * as components from "./components"

async function loadComponent(componentPathRaw: string, helpers: Record<string, any>): Promise<string[]> {
    const componentPath = path.resolve(componentPathRaw)
    const filename = path.basename(componentPath, path.extname(componentPath))

    try {
        const module = await import(`file://${componentPath}`)
        if (module) {
            if (!module.default) {
                return [
                    components.p(`The component "${filename}" did not load correctly!`),
                    components.p("No default export is provided."),
                ]
            }

            if (typeof module.default !== "function") {
                return [
                    components.p(`The component "${filename}" did not load correctly!`),
                    components.p("The default export must be a function."),
                ]
            }

            const result = module.default({ ...helpers, })

            if (!Array.isArray(result) || !result.every(x => typeof x === "string")) {
                return [
                    components.p(`The component "${filename}" did not load correctly!`),
                    components.p("The default export must be a function returning other components inside an array."),
                ]
            }

            return result
        }

        return [
            components.p(`The component "${filename}" did not load correctly!`),
            components.p("The error is unknown"),
        ]
    } catch (error) {
        return [
            components.p(`The component "${filename}" did not load correctly!`),
            components.p(error instanceof Error ? `${error.message} at ${error.stack}` : "The error is unknown"),
        ]
    }
}

async function buildComponent(componentPathRaw: string, templatePath: string) {
    const componentPath = path.resolve(componentPathRaw)
    const filename = path.basename(componentPath, path.extname(componentPath))
    const buildFileContainer = filename === "index" ? path.dirname(componentPath) : path.join(path.dirname(componentPath), filename)

    if (!fs.existsSync(buildFileContainer))
        fs.mkdirSync(buildFileContainer)

    const buildfilePath = path.join(buildFileContainer, "index.html")
    const html = (await loadComponent(
        componentPath,
        components
    )).join("")
    fs.writeFileSync(buildfilePath, transformTemplate(html, templatePath, () => {
        return components.div([
            components.p(`The component "${filename}" did not load correctly!`),
            components.p("The specified template path does not exist."),
        ])
    }), "utf-8")
}

function transformTemplate(newHtml: string, templatePath: string, onTemplateNotFound: () => string): string {
    if (!fs.existsSync(templatePath)) {
        return onTemplateNotFound()
    }

    let templateHtml = fs.readFileSync(templatePath, "utf-8")
    templateHtml = `<!-- This page was auto-generated by VulcrumJS -->\n${templateHtml}`
    templateHtml = templateHtml.replace(/<VulcrumRoot \/>/g, newHtml)
    return templateHtml
}

buildComponent("examples/home.js", "examples/template.html")
