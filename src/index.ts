import fs from "fs"
import path from "path"
import * as components from "./components"

type Metadata = Record<string, string>

async function loadComponent(componentPathRaw: string, helpers: Record<string, any>): Promise<[Metadata, string[], string]> {
    const componentPath = path.resolve(componentPathRaw)
    const filename = path.basename(componentPath, path.extname(componentPath))

    try {
        const module = await import(`file://${componentPath}`)
        if (module) {
            if (!module.default) {
                return [
                    {
                        title: "Error",
                    },
                    [],
                    components.div([
                        components.p(`The component "${filename}" did not load correctly!`),
                        components.p("No default export is provided."),
                    ]),
                ]
            }

            if (typeof module.default !== "function") {
                return [
                    {
                        title: "Error",
                    },
                    [],
                    components.div([
                        components.p(`The component "${filename}" did not load correctly!`),
                        components.p("The default export must be a function."),
                    ]),
                ]
            }

            const result = module.default({ ...helpers, })
            let metadata = {}
            let stylesheets = []

            if (module.metadata) {
                metadata = module.metadata()
            }

            if (module.stylesheets) {
                stylesheets = module.stylesheets()
            }

            return [
                metadata,
                stylesheets,
                result,
            ]
        }

        return [
            {
                title: "Error",
            },
            [],
            components.div([
                components.p(`The component "${filename}" did not load correctly!`),
                components.p("The error is unknown"),
            ])
        ]
    } catch (error) {
        return [
            {
                title: "Error",
            },
            [],
            components.div([
                components.p(`The component "${filename}" did not load correctly!`),
                components.p(error instanceof Error ? `${error.message} at ${error.stack}` : "The error is unknown"),
            ])
        ]
    }
}

async function buildComponent(componentPathRaw: string, templatePath: string) {
    const componentPath = path.resolve(componentPathRaw)
    const filename = path.basename(componentPath, path.extname(componentPath))
    const buildFileContainer = filename === "index" ? path.dirname(componentPath) : path.join(path.dirname(componentPath), filename)

    if (!fs.existsSync(buildFileContainer))
        fs.mkdirSync(buildFileContainer)

    const buildfilePath = path.join(buildFileContainer, "index.html")
    const [metadata, stylesheets, html] = (await loadComponent(
        componentPath,
        components
    ))
    fs.writeFileSync(buildfilePath, transformTemplate(html, metadata, stylesheets, templatePath, () => {
        return components.div([
            components.p(`The component "${filename}" did not load correctly!`),
            components.p("The specified template path does not exist."),
        ])
    }), "utf-8")
}

function transformTemplate(newHtml: string, metadataRaw: Metadata, stylesheetsRaw: string[], templatePath: string, onTemplateNotFound: () => string): string {
    if (!fs.existsSync(templatePath)) {
        return onTemplateNotFound()
    }

    let templateHtml = fs.readFileSync(templatePath, "utf-8")
    const metadataElements: string[] = []
    const stylesheetElements: string[] = []

    for (const key of Object.keys(metadataRaw)) {
        switch (key) {
            case "title":
                // metadataElements.push(`<title>${metadataRaw[key]}</title>`)
                if (templateHtml.includes("<title>") && templateHtml.includes("</title>"))
                    templateHtml = templateHtml.replace(/<title>.*<\/title>/g, `<title>${metadataRaw[key]}</title>`)
                else
                    metadataElements.push(`<title>${metadataRaw[key]}</title>`)

                break
            default:
                metadataElements.push(`<meta name="${key}" content="${metadataRaw[key]}" />`)
                break
        }
    }

    stylesheetsRaw.forEach((stylesheetUrl: string) => {
        stylesheetElements.push(`<link rel="stylesheet" href="${stylesheetUrl}" />`)
    })

    templateHtml = `<!-- This page was auto-generated by VulcrumJS -->\n${templateHtml}`
    templateHtml = templateHtml.replace(/<VulcrumHead \/>/g, metadataElements.join("") + stylesheetElements.join(""))
    templateHtml = templateHtml.replace(/<VulcrumRoot \/>/g, newHtml)
    return templateHtml
}

buildComponent("examples/home.js", "examples/template.html")
