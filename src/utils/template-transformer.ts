import type { ComponentMetadata } from "./component-loader.js"
import fs from "fs"

export default function transformTemplate(newHtml: string, metadataRaw: ComponentMetadata, stylesheetsRaw: string[], templatePath: string, onTemplateNotFound: () => string): string {
    if (!fs.existsSync(templatePath)) {
        return onTemplateNotFound()
    }

    let templateHtml = fs.readFileSync(templatePath, "utf-8")
    const metadataElements: string[] = []
    const stylesheetElements: string[] = []

    for (const key of Object.keys(metadataRaw)) {
        switch (key) {
            case "title":
                if (templateHtml.includes("<title>") && templateHtml.includes("</title>"))
                    templateHtml = templateHtml.replace(/<title>.*<\/title>/g, `<title>${metadataRaw[key]}</title>`)
                else
                    metadataElements.push(`<title>${metadataRaw[key]}</title>`)
                break
            default:
                metadataElements.push(`<meta name="${key}" content="${metadataRaw[key]}" />`)
                break
        }
    }

    stylesheetsRaw.forEach((stylesheetUrl: string) => {
        stylesheetElements.push(`<link rel="stylesheet" href="${stylesheetUrl}" />`)
    })

    templateHtml = `<!-- This page was auto-generated by VulcrumJS -->\n${templateHtml}`
    templateHtml = templateHtml.replace(/<VulcrumHead \/>/g, metadataElements.join("") + stylesheetElements.join(""))
    templateHtml = templateHtml.replace(/<VulcrumRoot \/>/g, newHtml)
    return templateHtml
}
